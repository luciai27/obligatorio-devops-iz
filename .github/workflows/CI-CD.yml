name: CI/CD Voting App

on:
  push:
    branches: [dev, test, main]
  pull_request:
    branches: [dev, test, main]

env:
  TF_VERSION: 1.5.7
  AWS_REGION: us-east-1
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set environment name
        id: set_env
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          fi
    
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Images
        run: |
          chmod +x ./build-and-push.sh
          ./build-and-push.sh

      - name: Create ECR repository if not existe
        run: |
          aws ecr describe-repositories --repository-names lambda-backup || \
          aws ecr create-repository --repository-name lambda-backup
         
    
      - name: Build and Push Lambda image
        run: |
          docker build -t lambda-backup ./lambda-backup
          docker tag lambda-backup:latest $ECR_BASE_URL/lambda-backup:latest
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_BASE_URL
          docker push $ECR_BASE_URL/lambda-backup:latest

      - name: Terraform Init + Apply - Network Layer
        working-directory: infra/network
        run: |
          terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="key=voting-app-network.tfstate"
          terraform apply -auto-approve -input=false

      - name: Terraform Init + Apply - Env Layer
        working-directory: infra/env/${{ steps.set_env.outputs.env }}
        run: |
          terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="key=voting-app-${{ steps.set_env.outputs.env }}.tfstate"
          terraform apply -auto-approve -input=false -var-file="terraform.tfvars"

      - name: Replace AWS ID in manifest
        run: |
          for file in k8s-specifications/*-deployment.yaml; do
            sed -i "s|{{ECR_BASE_URL}}|${{ env.ECR_BASE_URL }}|g" "$file"
            sed -i "s|{{TAG_COMBINADO}}|${{ env.TAG_COMBINADO }}|g" "$file"
          done

      - name: Deploy Kubernetes Manifests
        if: success()
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name voting-app-${{ steps.set_env.outputs.env }}-cluster
          kubectl apply -f k8s-specifications/

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Java Runtime and Taurus dependencies
        run: |
          sudo apt update
          sudo apt install -y default-jre-headless python3-tk python3-dev libxml2-dev libxslt-dev zlib1g-dev net-tools

      - name: Install Taurus (bzt)
        run: |
          python -m pip install --upgrade pip
          python -m pip install bzt

      - name: Run JMeter Test
        if: github.ref == 'refs/heads/dev'
        env:
          ALB_VOTE: ${{ secrets.ALB_VOTE }}
          ALB_RESULT: ${{ secrets.ALB_RESULT }}
          VOTE_PORT: "8080"
          RESULT_PORT: "8081"

        run: |
          echo "Running test for Vote site"
          bzt test.jmx -o modules.jmeter.properties.TARGET_DOMAIN=$ALB_VOTE -o modules.jmeter.properties.TARGET_PORT=$VOTE_PORT

          echo "Running test for Result site"
          bzt test.jmx -o modules.jmeter.properties.TARGET_DOMAIN=$ALB_RESULT -o modules.jmeter.properties.TARGET_PORT=$RESULT_PORT

         
      - name: Invoke Lambda Backup
        if: success()
        run: |
          aws lambda invoke \
            --function-name eks_backup \
            --region $AWS_REGION \
            --log-type Tail \
            lambda_response.json
          cat lambda_response.json

      - name: Email notification
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          subject: "✅ Deploy OK - ${{ steps.set_env.outputs.env }}"
          to: ${{ secrets.REPO_OWNER_MAIL }}
          from: "CI/CD Bot <${{ secrets.EMAIL_USER }}>"
          body: |
            La infraestructura y aplicación para el ambiente **${{ steps.set_env.outputs.env }}** se desplegó correctamente en AWS.
            - Repositorio: ${{ github.repository }}
            - Rama: ${{ github.ref_name }}
            - Usuario: ${{ github.actor }}
