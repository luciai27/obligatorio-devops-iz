name: CI/CD Voting App

on:
  push:
    branches: [dev, test, main]


env:
  TF_VERSION: 1.5.7
  AWS_REGION: us-east-1
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set environment name
        id: set_env
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          fi
    
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Images
        run: |
          chmod +x ./build-and-push.sh
          ./build-and-push.sh

      - name: Terraform Init + Apply - Network Layer
        working-directory: infra/network
        run: |
          terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="key=voting-app-network.tfstate"
          terraform apply -auto-approve -input=false

      - name: Terraform Init + Apply - Env Layer
        working-directory: infra/env/${{ steps.set_env.outputs.env }}
        run: |
          terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="key=voting-app-${{ steps.set_env.outputs.env }}.tfstate"
          terraform apply -auto-approve -input=false -var-file="terraform.tfvars"

      - name: Replace AWS ID in manifest
        run: |
          for file in k8s-specifications/*-deployment.yaml; do
            sed -i "s|{{ECR_BASE_URL}}|${{ env.ECR_BASE_URL }}|g" "$file"
            sed -i "s|{{TAG_COMBINADO}}|${{ env.TAG_COMBINADO }}|g" "$file"
          done

      - name: Deploy Kubernetes Manifests
        if: success()
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name voting-app-${{ steps.set_env.outputs.env }}-cluster
          kubectl apply -f k8s-specifications/

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Java Runtime and Taurus dependencies
        run: |
          sudo apt update
          sudo apt install -y default-jre-headless python3-tk python3-dev libxml2-dev libxslt-dev zlib1g-dev net-tools

      - name: Install Taurus (bzt)
        run: |
          python -m pip install --upgrade pip
          python -m pip install bzt


      - name: Obtener ELBs por puerto (8080 y 8081)
        id: elb_ports
        run: | 
            echo "Buscando ELBs que escuchen en 8080 y 8081..."   
            readarray -t dns_array_8080 < <( aws elb describe-load-balancers --output json | jq -r '.LoadBalancerDescriptions[] | select(.ListenerDescriptions[].Listener.LoadBalancerPort == 8080) | "\(.CreatedTime) \(.DNSName)"' | sort | awk '{print $2}')
        
            if [ "${{ steps.set_env.outputs.env }}" = "dev" ]; then
              vote=${dns_array_8080[0]}
            elif [ "${{ steps.set_env.outputs.env }}" = "test" ]; then
              vote=${dns_array_8080[1]}
            else
              vote=${dns_array_8080[2]}
            fi

            echo "DNS vote: $vote"

            readarray -t dns_array_8081 < <( aws elb describe-load-balancers --output json | jq -r '.LoadBalancerDescriptions[] | select(.ListenerDescriptions[].Listener.LoadBalancerPort == 8081) | "\(.CreatedTime) \(.DNSName)"' | sort | awk '{print $2}')
        
            if [ "${{ steps.set_env.outputs.env }}" = "dev" ]; then
              result=${dns_array_8081[0]}
            elif [ "${{ steps.set_env.outputs.env }}" = "test" ]; then
              result=${dns_array_8081[1]}
            else
              result=${dns_array_8081[2]}
            fi

            echo "DNS result: $result"

            echo "vote=$(echo "$vote" | tr -d '\n\r')" >> $GITHUB_OUTPUT
            echo "result=$(echo "$result" | tr -d '\n\r')" >> $GITHUB_OUTPUT


      - name: Run JMeter Test
        env:
          ALB_VOTE: "${{ steps.elb_ports.outputs.vote }}"
          ALB_RESULT: "${{ steps.elb_ports.outputs.result }}"
          VOTE_PORT: "8080"
          RESULT_PORT: "8081"

        run: |
          echo "Running test for Vote site"
          bzt test.jmx \
          -o modules.jmeter.properties.TARGET_DOMAIN=$ALB_VOTE \
          -o modules.jmeter.properties.TARGET_PORT=$VOTE_PORT \
          -o reporting='[{"module": "passfail", "criteria": ["succ<100%,stop as failed"]}]'

          echo "Running test for Result site"
          bzt test.jmx \
          -o modules.jmeter.properties.TARGET_DOMAIN=$ALB_VOTE \
          -o modules.jmeter.properties.TARGET_PORT=$VOTE_PORT \
          -o reporting='[{"module": "passfail", "criteria": ["succ<100%,stop as failed"]}]'
   
      - name: Invocar Lambda con ALBs
        env:
          ALB_RESULT: "http://${{ steps.elb_ports.outputs.result }}:8081"
          ALB_VOTE: "http://${{ steps.elb_ports.outputs.vote }}:8080"
        run: |
          echo "Invocando Lambda con URLs: $ALB_RESULT y $ALB_VOTE"
        
          PAYLOAD=$(jq -n \
            --arg url1 "$ALB_RESULT" \
            --arg url2 "$ALB_VOTE" \
            '{urls: [$url1, $url2]}')

          aws lambda invoke \
            --function-name url-checker-${{ steps.set_env.outputs.env }} \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json
        
      - name: Procesar resultado de Lambda
        id: lambda_result
        run: |
          echo "Procesando resultado de Lambda..."
          cat response.json

          has_error=$(jq 'to_entries[] | select(.value != "OK")' response.json)

          if [ -z "$has_error" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            subject="✅ Healthcheck OK - ${{ steps.set_env.outputs.env }}"
          else
            echo "status=fail" >> $GITHUB_OUTPUT
            subject="❌ Healthcheck FAIL - ${{ steps.set_env.outputs.env }}"
            exit 1
          fi

          # Generar cuerpo del mail
          body=$(jq -r 'to_entries[] | "\(.key): \(.value)"' response.json | sed 's/^/- /')

          echo "subject=$subject" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Email notification de lambda result
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          subject: ${{ steps.lambda_result.outputs.subject }}
          to: ${{ secrets.REPO_OWNER_MAIL }}
          from: "CI/CD Bot <${{ secrets.EMAIL_USER }}>"
          body: |
            Resultado del healthcheck en ambiente **${{ steps.set_env.outputs.env }}**:

            ${{ steps.lambda_result.outputs.body }}

            Repositorio: ${{ github.repository }}
            Rama: ${{ github.ref_name }}
            Ejecutado por: ${{ github.actor }}     

      - name: Email notification
        if: success()
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          subject: "✅ Deploy OK - ${{ steps.set_env.outputs.env }}"
          to: ${{ secrets.REPO_OWNER_MAIL }}
          from: "CI/CD Bot <${{ secrets.EMAIL_USER }}>"
          body: |
            La infraestructura y aplicación para el ambiente **${{ steps.set_env.outputs.env }}** se desplegó correctamente en AWS.
            - Repositorio: ${{ github.repository }}
            - Rama: ${{ github.ref_name }}
            - Usuario: ${{ github.actor }}
